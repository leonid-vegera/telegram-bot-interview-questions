{
  "common": [
    {
      "id": 2,
      "text": "Що відрізняє хороший код від поганого?",
      "hasOptions": false,
      "answer": "Гарний код відрізняється читабельністю, ефективністю, масштабованістю, надійністю, елегантністю та відповідністю стандартам. Він також тестований і легко зрозумілий для інших розробників."
    },
    {
      "id": 3,
      "text": "Які HTTP-методи зазвичай використовуються в RESTful веб-сервісах?",
      "hasOptions": false,
      "answer": "У RESTful веб-сервісах часто використовуються такі HTTP-методи:\n1. GET: для отримання ресурсів.\n2. POST: для створення нових ресурсів.\n3. PUT: для оновлення існуючих ресурсів або створення нових.\n4. DELETE: для видалення ресурсів.\n5. PATCH: для часткового оновлення ресурсів."
    },
    {
      "id": 4,
      "text": "У чому небезпека виконання коду, що надходить від користувача?",
      "hasOptions": false,
      "answer": "Виконання коду, наданого користувачем, може створити серйозні загрози для безпеки системи. Можливість використання вразливостей в коді може призвести до атак, таких як ін'єкція коду, де зловмисник може впровадити та виконати свій власний код. Це може призвести до розголошення конфіденційної інформації, втрати контролю над системою або викликати інші види шкідливих впливів. Тому важливо надійно фільтрувати та перевіряти вхідні дані, а також обмежувати можливість виконання коду зовнішніх джерел."
    },
    {
      "id": 5,
      "text": "Що таке ООП?",
      "hasOptions": false,
      "answer": "Об'єктно-орієнтоване програмування (ООП) — це парадигма програмування, яка базується на концепції об'єктів, які можуть містити дані у вигляді полів (атрибутів) і коду у вигляді процедур (методів). Головні принципи ООП включають спадкування (властивість об'єктів переймати характеристики і поведінку від інших об'єктів), інкапсуляцію (зміна даних об'єкта відбувається тільки через його методи), та поліморфізм (одна і та ж сама операція може вести себе по-різному в залежності від класу об'єкта, який її викликає). ООП дозволяє створювати більш підтримувані, розширювані та багатофункціональні програми."
    },
    {
      "id": 6,
      "text": "Яка різниця між класом і абстрактним класом?",
      "hasOptions": false,
      "answer": "Клас і абстрактний клас є об'єктно-орієнтованими концепціями, але мають деякі відмінності. Клас - це шаблон для створення об'єктів, який визначає атрибути (властивості) і методи (процедури) об'єктів. Абстрактний клас - це клас, який не може бути визначений як об'єкт і може містити абстрактні методи, тобто методи, які не мають реалізації в самому класі, але повинні бути реалізовані в підкласах. Інша важлива різниця полягає в тому, що об'єкти не можуть бути створені від абстрактного класу, але вони можуть бути створені від конкретного класу."
    }
  ],
  "html": [
    {
      "id": 1,
      "text": "Який тег використовується для створення посилання?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Який тег використовується для вставлення зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Який тег знаходиться у <html> визначає заголовок документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Який атрибут використовується для визначення альтернативного зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Який атрибут дає змогу відкрити посилання в новій вкладці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Навіщо використовується атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' використовується для відображення текстової підказки або прикладу введення в поле форми до того, як користувач почне вводити свої дані."    },
    {
      "id": 7,
      "text": "Як створити непронумерований список у HTML?",
      "hasOptions": false,
      "answer": "Для створення такого списку в HTML використовується тег <code>ul</code>, а для визначення кожного пункту списку - тег <code>li</code>."    },
    {
      "id": 8,
      "text": "Що таке HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - це стандартизована мова розмітки, яка використовується для створення та розробки веб-сторінок. Це система для розмітки окремих частин веб-сторінки з використанням тегів, укладених у кутові дужки."    },
    {
      "id": 9,
      "text": "Що робить тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Це декларація, яка інформує веб-браузер про версію мови розмітки, використану під час створення веб-сторінки. Це допомагає браузеру коректно відобразити сторінку."    },
    {
      "id": 10,
      "text": "Який тег використовується для створення таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який тег використовується для створення заголовка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який тег використовується для створення рядка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Який тег використовується для створення ячейки таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Що таке семантичні теги в HTML?",
      "hasOptions": false,
      "answer": "Семантичні теги в HTML - це теги, які передають інформацію про зміст або призначення вмісту, а не тільки про його зовнішній вигляд. Приклади семантичних тегів: header, footer, article, section, nav та ін. Вони допомагають створювати більше структуровані та доступні веб-сторінки."    },
    {
      "id": 15,
      "text": "Який атрибут використовується для встановлення фонового зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Який тег використовується для створення списку, що випадає?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Який тег використовується для вставлення JavaScript коду в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Який атрибут використовується для вказівки шляху до зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Що робить атрибут 'readonly' в елементі форми?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' робить елемент форми тільки для читання, що означає, що користувач не може змінювати значення елемента, але може переглядати його. Це може бути корисним, якщо ви хочете відобразити інформацію, яка не повинна бути змінена."    },
    {
      "id": 20,
      "text": "Що таке веб-стандарти і навіщо вони потрібні?",
      "hasOptions": false,
      "answer": "Веб-стандарти - це рекомендації, розроблені групами стандартів, такими як W3C або WHATWG, для забезпечення сумісності та стійкості веб-технологій. Вони включають рекомендації щодо HTML, CSS, JavaScript та інших веб-технологій. Дотримання веб-стандартів допомагає забезпечити коректну роботу веб-сторінок у різних браузерах та пристроях, а також полегшити обслуговування та розширення веб-сайтів у майбутньому."    },
    {
      "id": 21,
      "text": "Що таке чуйний (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Це підхід до веб-дизайну, який дозволяє веб-сторінкам коректно відображатися та функціонувати на різних пристроях, включаючи мобільні телефони, планшети та настільні комп'ютери, шляхом використання гнучких макетів, гнучких зображень та CSS медіазапитів для адаптації дизайну до різних розмірів екрана та характеристик пристроїв."    },
    {
      "id": 22,
      "text": "Який HTML-тег використовується для вставки відео?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Який тег використовується для створення головного заголовка на веб-сторінці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Що робить тег <br>?",
      "hasOptions": false,
      "answer": "Він використовується для перенесення рядка, що дозволяє створити новий рядок у тому місці, де він розміщений. Це зручний спосіб керування розташуванням тексту на веб-сторінці без використання додаткових стилів або елементів."    },
    {
      "id": 25,
      "text": "Який тег використовується для створення впорядкованого списку?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Що таке DOM у контексті веб-розробки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - це програмний інтерфейс для веб-документів. Це представлення структурованого документа у вигляді об'єктної моделі, яке дозволяє програмам і скриптам взаємодіяти з вмістом, структурою та стилями веб-сторінки. DOM представляє документ як дерево об'єктів, кожен з яких відповідає частині сторінки."    },
    {
      "id": 27,
      "text": "Який атрибут використовується для визначення стилів елемента на сторінці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Що таке атрибут 'alt' у тезі <img>?",
      "hasOptions": false,
      "answer": "Він використовується для надання альтернативного тексту, який відображатиметься у випадку, якщо зображення не може бути завантажене. Це також може бути корисним для забезпечення доступності, оскільки скрін-рідери можуть використовувати цей текст для опису зображення користувачам з обмеженими можливостями. "
    },
    {
      "id": 29,
      "text": "Що таке DOCTYPE і навіщо його використовують?",
      "hasOptions": false,
      "answer": "DOCTYPE (Document Type Declaration) - це інструкція, яка вказує веб-браузеру, як правильно трактувати HTML-документ. Вона зазвичай розташована на початку HTML-коду. DOCTYPE визначає версію HTML або XHTML, яку використовує документ. Використання DOCTYPE є важливим для забезпечення правильного відображення сторінки в різних браузерах, адже вказання правильного DOCTYPE дозволяє браузерам переключитися в режим сумісності з конкретною версією HTML та коректно інтерпретувати структуру документа."
    },
    {
      "id": 30,
      "text": "Які теги з найсвіжіших оновлень ви знаєте?",
      "hasOptions": false,
      "answer": "Деякі з найсвіжіших оновлень HTML включають такі теги:\n1. <article>: для представлення контенту, який може існувати сам по собі.\n2. <section>: для групування схожого контенту, який може мати власну тему.\n3. <nav>: для визначення блоку навігації.\n4. <header>: для визначення верхньої частини сторінки або розділу.\n5. <footer>: для визначення нижньої частини сторінки або розділу."
    },
    {
      "id": 31,
      "text": "Що таке data-атрибути, в яких випадках їх використовуєте?",
      "hasOptions": false,
      "answer": "Data-атрибути в HTML — це атрибути, які починаються з префіксу 'data-', і призначені для зберігання користувацьких даних в елементах. Вони дозволяють вбудовувати додаткову інформацію без втручання в стандартні атрибути. Data-атрибути дуже корисні в ситуаціях, коли потрібно зберегти додаткові дані, які можуть бути використані для скриптів, стилів чи іншого коду. Наприклад, використовують data-атрибути для зберігання ідентифікаторів, параметрів або іншої інформації, яка може знадобитися у веб-розробці."
    },
    {
      "id": 32,
      "text": "Яка різниця між атрибутами 'class' та 'id' в HTML?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "class - можна використовувати для стилізації одночасно декількох елементів, id - повинен бути унікальним на сторінці", "isCorrect": true },
        { "id": 2, "text": "class - повинен бути унікальним на сторінці, id - можна використовувати для стилізації одночасно декількох елементів", "isCorrect": false },
        { "id": 3, "text": "class - використовується для визначення ідентифікатора елемента, id - для групування елементів", "isCorrect": false },
        { "id": 4, "text": "class і id - обидва можна використовувати для стилізації будь-якої кількості елементів", "isCorrect": false }
      ]
    },
    {
      "id": 33,
      "text": "Що таке внутрішні та зовнішні гіперпосилання і які вони мають атрибути?",
      "hasOptions": false,
      "answer": "Внутрішні гіперпосилання (внутрішні посилання) вказують на ресурси, які знаходяться в межах того самого веб-сайту. Зовнішні гіперпосилання (зовнішні посилання) спрямовують на ресурси за межами поточного веб-сайту. Атрибути гіперпосилань включають:\n1. href - визначає адресу ресурсу для посилання.\n2. target - визначає, де має відкриватися посилання (наприклад, у тому ж вікні чи в новому вікні).\n3. title - надає текстовий опис, який з'являється при наведенні курсора."
    },
    {
      "id": 34,
      "text": "Що ви знаєте про SVG?",
      "hasOptions": false,
      "answer": "SVG (Scalable Vector Graphics) - це формат графіки на основі XML, який використовується для відображення векторної графіки в браузерах та інших програмах. Основні особливості SVG включають масштабованість без втрат якості, векторну природу графіки, інтерактивність, підтримку текстових та графічних елементів, а також можливість використання CSS і JavaScript для стилізації та додавання функціональності."
    },
    {
      "id": 35,
      "text": "Як можна додати SVG на сторінку сайту?",
      "hasOptions": false,
      "answer": "Є кілька способів додавання SVG на сторінку сайту:\n1. Вбудований SVG-код безпосередньо в HTML-файл.\n2. Посилання на зовнішній файл SVG за допомогою тегу <img>.\n3. Використання тегу <object> для вставки зовнішнього SVG-файлу.\n4. Використання CSS background для вбудовання SVG як фону елементу."
    },
    {
      "id": 36,
      "text": "Як правильно визначити коло в SVG?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<circle cx='50' cy='50' r='30' />", "isCorrect": true },
        { "id": 2, "text": "<rectangle x='50' y='50' width='30' height='30' />", "isCorrect": false },
        { "id": 3, "text": "<ellipse cx='50' cy='50' rx='30' ry='20' />", "isCorrect": false },
        { "id": 4, "text": "<path d='M50 20 A30 30 0 1 1 20 50 Z' />", "isCorrect": false }
      ]
    },
    {
      "id": 37,
      "text": "Як визначити лінію в SVG?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<line x1='10' y1='10' x2='50' y2='50' />", "isCorrect": true },
        { "id": 2, "text": "<path d='M10 10 L50 50' />", "isCorrect": false },
        { "id": 3, "text": "<polygon points='10,10 50,10 50,50' />", "isCorrect": false },
        { "id": 4, "text": "<rect x='10' y='10' width='40' height='2' />", "isCorrect": false }
      ]
    },
    {
      "id": 38,
      "text": "Як створити форму в HTML і забезпечити її валідацію?",
      "hasOptions": false,
      "answer": "Для створення форми в HTML використовують тег <form>. Наприклад:\n\n```html\n<form action='/submit' method='post' id='myForm'>\n  <!-- Елементи форми, такі як input, textarea, select та інші -->\n</form>\n```\n\nЩоб забезпечити валідацію, можна використовувати вбудовані атрибути та JavaScript. Декілька прикладів:\n1. Використання атрибутів HTML5, таких як required, pattern і т.д.\n2. Використання JavaScript для кастомної валідації перед відправленням форми.\n3. Використання бібліотек для валідації форм, таких як jQuery Validation або більш сучасних рішень."
    },
    {
      "id": 39,
      "text": "Що таке <iframe> і для чого його використовують?",
      "hasOptions": false,
      "answer": "<iframe> - це HTML-тег, який використовується для вставки вмісту іншого документа в поточний документ. Використовується для вставки веб-сторінок, відео, карток тощо. <iframe> має атрибути, такі як 'src' (вказує на посилання на вміст), 'width' і 'height' (вказують розміри фрейму), 'frameborder' (визначає відображення рамки), 'allowfullscreen' (дозволяє вмісту фрейму заповнювати весь екран у режимі повного екрану) та інші. Використовується для вбудовування контенту з інших джерел на веб-сторінці."
    },
    {
      "id": 40,
      "text": "Які основні відмінності між блоковими та вбудованими елементами в HTML?",
      "hasOptions": false,
      "answer": "Блокові елементи в HTML зазвичай займають всю доступну ширину, розташовуються один над одним, можуть містити інші блокові та вбудовані елементи. Вбудовані елементи займають тільки стільки місця, скільки потрібно для відображення свого вмісту, розташовуються поруч один з одним та ігнорують ширину та висоту."
    },
    {
      "id": 41,
      "text": "Як працює наслідування в CSS?",
      "hasOptions": false,
      "answer": "У CSS наслідування - це механізм, за яким деякі властивості елементів автоматично успадковуються від їхніх батьківських елементів. Наприклад, колір тексту та розмір шрифту можуть успадковуватися від батьківського елементу до його дочірніх елементів. Однак не всі властивості успадковуються, і це може бути змінено за допомогою спеціальних значень, таких як 'inherit' або 'initial'."
    },
    {
      "id": 42,
      "text": "Що таке «модель коробки» в CSS і як її можна змінити?",
      "hasOptions": false,
      "answer": "Модель коробки в CSS визначає, як браузер розраховує розміри та розміщення елементів на веб-сторінці. Вона включає ширину та висоту елемента, внутрішні та зовнішні відступи, а також рамки. Модель коробки можна змінити за допомогою властивостей CSS, таких як 'box-sizing'. Значення 'box-sizing: border-box;' робить так, що ширина та висота елемента включають в себе внутрішні та зовнішні відступи та рамки, що полегшує розрахунок розмірів елементів."
    },
    {
      "id": 43,
      "text": "Як можна приховати елемент за допомогою CSS?",
      "hasOptions": false,
      "answer": "Існує кілька способів приховати елемент за допомогою CSS:\n\n1. Використання 'display: none;': Ця властивість приховує елемент і забирає його місце в потоці документу.\n\n2. Використання 'visibility: hidden;': Ця властивість робить елемент невидимим, але він залишається на місці, зберігаючи місце в потоці.\n\n3. Використання 'opacity: 0;': Ця властивість робить елемент прозорим, зроблюючи його невидимим, але елемент все ще займає місце в потоці.\n\n4. Використання 'position: absolute; left: -9999px;': Цей метод зсуває елемент за межі видимої області, залишаючи його прихованим."
    }

  ],
  "css": [
    {
      "id": 1,
      "text": "У чому різниця між «скиданням» та «нормалізацією» CSS? Що б ви обрали і чому?",
      "hasOptions": false,
      "answer": "Скидання (reset) скидає всі вбудовані в браузер стилі елементів. Normalize наводить стилі до єдиного вигляду у всіх браузерах. Краще використовувати Normalize через кросбраузерність."    },
    {
      "id": 2,
      "text": "Що таке специфічність CSS селекторів і як вона працює?",
      "hasOptions": false,
      "answer": "Специфічність селектора (ще називають вагою) це властивість, що визначає пріоритет стильового правила, тобто те, який стиль буде застосований до HTML елементу в результаті. Наприклад, використовуючи якусь UI бібліотеку, елементам цієї бібліотеки будуть застосовані правила задані авторами за замовчуванням: При необхідності можна поміняти стилі на свої, «перебивши» дефолтні більш специфічним селектором.\n\nДокладніше тут: target='_blank'>Специфічність (MDN)</a>"    },
    {
      "id": 3,
      "text": "Що таке CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - це мова стилів, яка використовується для опису зовнішнього вигляду та форматування документа, написаного мовою розмітки, такою як HTML. CSS дозволяє розробникам керувати макетом, шрифтами, кольорами та іншими стилістичними аспектами веб-сторінки ."    },
    {
      "id": 4,
      "text": "Чому, як правило, краще розмістити підключення CSS у <head>, а <script> перед тегом </body>? Чи знаєте ви якісь винятки, наведіть приклади?",
      "hasOptions": false,
      "answer": "Стилі рекомендується підключати в head для того, щоб сторінка якнайшвидше прийняла свій зовнішній вигляд. Скрипти підключені в head можуть загальмувати цей процес, у зв'язку з цим їх рекомендується підключати перед закриваючим тегом body. Винятком є скрипти аналітики, визначення кількості відвідувачів, які не дочекалися завантаження сторінки. У цьому випадку скрипт повинен бути підключений до head."    },
    {
      "id": 5,
      "text": "Що робить властивість 'z-index' у CSS?",
      "hasOptions": false,
      "answer": "Властивість 'z-index' у CSS контролює стіковий порядок елементів по осі Z. Елемент з більшим значенням 'z-index' буде відображатися поверх елемента з меншим значенням 'z-index'."    },
    {
      "id": 6,
      "text": "Які є способи відцентрувати div?",
      "hasOptions": false,
      "answer": "Існує кілька способів відцентрувати div в CSS, ось деякі з них: \n1. Використання властивостей margin і auto: `margin: 0 auto;`.\n2. Використання Flexbox: `display: flex; justify-content: center;align-items: center;`.\n3.Використання Grid Layout: `display: grid;place-items: center;`.\n4. ` на батьківському елементі та `display: inline-block;` на самому div.`."    },
    {
      "id": 7,
      "text": "Яка властивість використовується для встановлення кольору фону?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Яка властивість дозволяє встановити зовнішні відступи елемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Яка властивість використовується для встановлення шрифту?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Яка властивість CSS дозволяє контролювати видимість елемента в DOM, але при цьому зберігає його місце?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Яка властивість CSS використовується для встановлення тіней елементів?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який селектор вибирає всі елементи .child, які є безпосередніми дочірніми елементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який селектор CSS вибирає всі елементи, які мають вказаний атрибут, що починається з певного рядка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Який селектор CSS вибирає всі елементи, які мають вказаний атрибут, що закінчується певним рядком?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    },
    {
      "id": 15,
      "text": "Як правильно підключити зовнішній файл CSS до HTML-сторінки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link rel='stylesheet' type='text/css' href='styles.css'>", "isCorrect": false },
        { "id": 2, "text": "<style src='styles.css'>", "isCorrect": false },
        { "id": 3, "text": "<css href='styles.css'>", "isCorrect": false },
        { "id": 4, "text": "<link type='text/css' href='styles.css'>", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Які комбінатори селекторів в CSS ви використовуєте для вибору всіх <p> елементів, які є нащадками <div> елемента з класом 'container'?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "div .container p", "isCorrect": false },
        { "id": 2, "text": ".container p", "isCorrect": true },
        { "id": 3, "text": "div + p", "isCorrect": false },
        { "id": 4, "text": ".container > p", "isCorrect": false }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Що таке чиста функція?",
      "hasOptions": false,
      "answer": "Це функція, яка повертає однаковий результат, коли викликається з тим самим набором аргументів, а також не має побічних ефектів (side effects)"    },
    {
      "id": 2,
      "text": "Що таке замикання?",
      "hasOptions": false,
      "answer": "Замикання - це здатність функції запам'ятовувати лексичне оточення, в якому вона була створена, тобто зберігати в собі посилання на це оточення і звертатися до нього.\n\n<a href='https://youtu.be /mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Докладніше відео про замикання</a>"    },
    {
      "id": 3,
      "text": "let VS const: чому краще використовувати const, коли це можливо?",
      "hasOptions": false,
      "answer": "Використання const дає дві переваги:\n1) Безпека: оголошення змінних через const захищає від несподіваної зміни значення змінної в коді, що може часто призводить до помилок і несподіваної поведінки програми.\n2) Читання: використання const дозволяє читачеві коду розуміти, що значення змінної не буде змінюватися протягом виконання програми, що робить код більш зрозумілим і зменшує можливість помилок. _blank'>Відео про VAR/LET/CONST</a>"    },
    {
      "id": 4,
      "text": "Що таке проміси (Promises) у JavaScript?",
      "hasOptions": false,
      "answer": "Проміси - це об'єкти, які представляють результат асинхронної операції. Вони можуть перебувати в одному з трьох станів: очікування (pending), виконане (fulfilled) або відхилено (rejected)."    },
    {
      "id": 5,
      "text": "Що таке деструктуризація JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризація дозволяє вилучати окремі властивості з об'єктів або елементи з масивів і присвоювати їх змінним у зручнішій формі. Наприклад, ось так ми можемо одним рядком вилучити ім'я та адресу користувача з об'єкта user:\n<code>const {name , address} = user;</code>"    },
    {
      "id": 6,
      "text": "Що таке стрілочні функції JavaScript?",
      "hasOptions": false,
      "answer": "Стрілкові функції - це синтаксично компактний спосіб запису функцій у JavaScript, який не має свого власного 'this'. Вони часто використовуються для створення анонімних функцій.\n\n<a href='https://youtu.be /nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Детальне відео про функції в JS</a>"    },
    {
      "id": 7,
      "text": "Що таке hoisting у JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — це механізм JavaScript, при якому змінні та оголошення функцій переміщаються на верх своєї області видимості перед виконанням коду."    },
    {
      "id": 8,
      "text": "Який метод використовується для додавання елемента в масив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Який об'єкт представляє поточне вікно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Який оператор використовується для порівняння на строгу рівність?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який метод використовується для видалення останнього елемента з масиву?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який метод JavaScript використовується для перетворення об'єкта в рядок JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який об'єкт у JavaScript використовується для роботи з датою та часом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Який метод масиву JavaScript використовується для фільтрації елементів за певним критерієм?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Що таке React JS?",
      "hasOptions": false,
      "answer": "React JS, або просто React, це відкрита бібліотека JavaScript для створення інтерфейсів користувача, особливо для односторінкових додатків (SPA). Ключові особливості React:\n1) Компонентний підхід: React будується на концепції компонентів, що дозволяє розробникам створювати легко шматки коду, що перевикористовуються;\n2) Віртуальний DOM: React використовує віртуальний DOM для відстеження змін Це абстракція реального DOM, що дозволяє бібліотеці оновлювати тільки ті частини інтерфейсу, які дійсно змінилися, замість повного перерендерингу сторінки. Це робить React відносно швидким;\n3) Хуки: Введення хуків дозволило використовувати стани та інші можливості класових компонентів у функціональних компонентах, що зробило код коротшим і чистішим; полегшує розробку складних програм.\n\nДокладніше: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Введення в React (відео)</a>"    },
    {
      "id": 2,
      "text": "Для чого потрібний атрибут key при рендері списків?",
      "hasOptions": false,
      "answer": "Ключі (keys) допомагають React визначати, які елементи були змінені, додані або видалені. Їх необхідно вказувати, щоб React міг зіставляти елементи масиву з часом. Кращий спосіб вибрати ключ - це використовувати рядок, який явно відрізнятиме елемент списку від його сусідів. Найкраще ви будете використовувати ID з ваших даних як ключі. Індекси масиву теж можна використовувати для цього, але тільки якщо елементи масиву не додаються на початок, не переставляються і не видаляються."    },
    {
      "id": 3,
      "text": "Як працює проп children?",
      "hasOptions": false,
      "answer": "Деякі компоненти не знають своїх нащадків заздалегідь. Це особливо характерно для таких компонентів, як Sidebar або Dialog, які являють собою як би «коробку», в яку можна щось покласти. Для таких компонентів можна використовувати спеціальний проп. children, який передасть дочірні елементи відразу на висновок.\n\nДокладніше: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target= '_blank'>Документація React (eng)</a>"    },
    {
      "id": 4,
      "text": "Що таке портали у React?",
      "hasOptions": false,
      "answer": "Портали дозволяють рендерувати дочірні елементи в DOM-вузол, який знаходиться поза DOM-ієрархією батьківського компонента. Типовий випадок застосування порталів - коли в батьківському компоненті задані стилі overflow: hidden або z-index, але вам потрібно, щоб дочірній елемент візуально виходив за рамки свого контейнера, найчастіше це діалогові вікна, спливаючі картки та підказки."    },
    {
      "id": 5,
      "text": "Що таке Reconciliation (Звірка)?",
      "hasOptions": false,
      "answer": "Це процес, за допомогою якого React оновлює DOM. Коли стан компонента змінюється, React повинен розрахувати необхідність оновлення DOM. Це робиться шляхом створення віртуального DOM і порівняння його з поточним DOM. У цьому контексті віртуальний DOM міститиме новий стан компонента. "    },
    {
      "id": 6,
      "text": "Для чого використовується хук useEffect в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Зберігання стану компонента",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Виконання побічних ефектів",
          "isCorrect": true
        },
        { "id": 3, "text": "Мемоізації значень", "isCorrect": false },
        {
          "id": 4,
          "text": "Створення посилань на елементи DOM",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Що буде, якщо другим аргументом в useEffect передати порожній масив []?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Помилка", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect буде запущений 0 раз",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect буде запущений 1 раз", "isCorrect": true },
        { "id": 4, "text": "Немає правильної відповіді", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Який хук використовується для створення стану у компоненті?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Який елемент використовується для групування елементів без додавання додаткових вузлів у DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "У нас є масив з рядками (arr), кожен з яких хочемо відобразити на сторінці. Який метод масиву потрібно застосувати до return компонента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Який елемент використовується для обробки помилок у дереві компонентів?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який (які) аргумент(и) приймає хук useMemo?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Функцію та масив залежностей", "isCorrect": true },
        { "id": 2, "text": "Функцію та об'єкт опцій", "isCorrect": false },
        { "id": 3, "text": "Функцію", "isCorrect": false },
        { "id": 4, "text": "Масив залежностей", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Для чого використовується хук useCallback в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Створення посилань на DOM елементи",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Зберігання стану компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Виконання побічних ефектів",
          "isCorrect": false
        },
        { "id": 4, "text": "Мемоізації функцій", "isCorrect": true }
      ]
    }
  ]
}
