{
  "html": [
    {
      "id": 1,
      "text": "Який тег використовується для створення посилання?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Який тег використовується для вставлення зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Який тег знаходиться у <html> визначає заголовок документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Який атрибут використовується для визначення альтернативного зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Який атрибут дає змогу відкрити посилання в новій вкладці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Навіщо використовується атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' використовується для відображення текстової підказки або прикладу введення в поле форми до того, як користувач почне вводити свої дані."    },
    {
      "id": 7,
      "text": "Як створити непронумерований список у HTML?",
      "hasOptions": false,
      "answer": "Для створення такого списку в HTML використовується тег <code>ul</code>, а для визначення кожного пункту списку - тег <code>li</code>."    },
    {
      "id": 8,
      "text": "Що таке HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - це стандартизована мова розмітки, яка використовується для створення та розробки веб-сторінок. Це система для розмітки окремих частин веб-сторінки з використанням тегів, укладених у кутові дужки."    },
    {
      "id": 9,
      "text": "Що робить тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "`Це декларація, яка інформує веб-браузер про версію мови розмітки, використану під час створення веб-сторінки. Це допомагає браузеру коректно відобразити сторінку."    },
    {
      "id": 10,
      "text": "Який тег використовується для створення таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який тег використовується для створення заголовка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який тег використовується для створення рядка таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Який тег використовується для створення ячейки таблиці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Що таке семантичні теги в HTML?",
      "hasOptions": false,
      "answer": "Семантичні теги в HTML - це теги, які передають інформацію про зміст або призначення вмісту, а не тільки про його зовнішній вигляд. Приклади семантичних тегів: header, footer, article, section, nav та ін. Вони допомагають створювати більше структуровані та доступні веб-сторінки."    },
    {
      "id": 15,
      "text": "Який атрибут використовується для встановлення фонового зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Який тег використовується для створення списку, що випадає?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Який тег використовується для вставлення JavaScript коду в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Який атрибут використовується для вказівки шляху до зображення?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Що робить атрибут 'readonly' в елементі форми?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' робить елемент форми тільки для читання, що означає, що користувач не може змінювати значення елемента, але може переглядати його. Це може бути корисним, якщо ви хочете відобразити інформацію, яка не повинна бути змінена."    },
    {
      "id": 20,
      "text": "Що таке веб-стандарти і навіщо вони потрібні?",
      "hasOptions": false,
      "answer": "Веб-стандарти - це рекомендації, розроблені групами стандартів, такими як W3C або WHATWG, для забезпечення сумісності та стійкості веб-технологій. Вони включають рекомендації щодо HTML, CSS, JavaScript та інших веб-технологій. Дотримання веб-стандартів допомагає забезпечити коректну роботу веб-сторінок у різних браузерах та пристроях, а також полегшити обслуговування та розширення веб-сайтів у майбутньому."    },
    {
      "id": 21,
      "text": "Що таке чуйний (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Це підхід до веб-дизайну, який дозволяє веб-сторінкам коректно відображатися та функціонувати на різних пристроях, включаючи мобільні телефони, планшети та настільні комп'ютери, шляхом використання гнучких макетів, гнучких зображень та CSS медіазапитів для адаптації дизайну до різних розмірів екрана та характеристик пристроїв."    },
    {
      "id": 22,
      "text": "Який HTML-тег використовується для вставки відео?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Який тег використовується для створення головного заголовка на веб-сторінці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Що робить тег <br>?",
      "hasOptions": false,
      "answer": "Він використовується для перенесення рядка, що дозволяє створити новий рядок у тому місці, де він розміщений. Це зручний спосіб керування розташуванням тексту на веб-сторінці без використання додаткових стилів або елементів."    },
    {
      "id": 25,
      "text": "Який тег використовується для створення впорядкованого списку?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Що таке DOM у контексті веб-розробки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - це програмний інтерфейс для веб-документів. Це представлення структурованого документа у вигляді об'єктної моделі, яке дозволяє програмам і скриптам взаємодіяти з вмістом, структурою та стилями веб-сторінки. DOM представляє документ як дерево об'єктів, кожен з яких відповідає частині сторінки."    },
    {
      "id": 27,
      "text": "Який атрибут використовується для визначення стилів елемента на сторінці?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Що таке атрибут 'alt' у тезі <img>?",
      "hasOptions": false,
      "answer": "Він використовується для надання альтернативного тексту, який відображатиметься у випадку, якщо зображення не може бути завантажене. Це також може бути корисним для забезпечення доступності, оскільки скрін-рідери можуть використовувати цей текст для опису зображення користувачам з обмеженими можливостями. "    }
  ],
  "css": [
    {
      "id": 1,
      "text": "У чому різниця між «скиданням» та «нормалізацією» CSS? Що б ви обрали і чому?",
      "hasOptions": false,
      "answer": "Скидання (reset) скидає всі вбудовані в браузер стилі елементів. Normalize наводить стилі до єдиного вигляду у всіх браузерах. Краще використовувати Normalize через кросбраузерність."    },
    {
      "id": 2,
      "text": "Що таке специфічність CSS селекторів і як вона працює?",
      "hasOptions": false,
      "answer": "Специфічність селектора (ще називають вагою) це властивість, що визначає пріоритет стильового правила, тобто те, який стиль буде застосований до HTML елементу в результаті. Наприклад, використовуючи якусь UI бібліотеку, елементам цієї бібліотеки будуть застосовані правила задані авторами за замовчуванням: При необхідності можна поміняти стилі на свої, «перебивши» дефолтні більш специфічним селектором.\n\nДокладніше тут: target='_blank'>Специфічність (MDN)</a>"    },
    {
      "id": 3,
      "text": "Що таке CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - це мова стилів, яка використовується для опису зовнішнього вигляду та форматування документа, написаного мовою розмітки, такою як HTML. CSS дозволяє розробникам керувати макетом, шрифтами, кольорами та іншими стилістичними аспектами веб-сторінки ."    },
    {
      "id": 4,
      "text": "Чому, як правило, краще розмістити підключення CSS у <head>, а <script> перед тегом </body>? Чи знаєте ви якісь винятки, наведіть приклади?",
      "hasOptions": false,
      "answer": "Стилі рекомендується підключати в head для того, щоб сторінка якнайшвидше прийняла свій зовнішній вигляд. Скрипти підключені в head можуть загальмувати цей процес, у зв'язку з цим їх рекомендується підключати перед закриваючим тегом body. Винятком є скрипти аналітики, визначення кількості відвідувачів, які не дочекалися завантаження сторінки. У цьому випадку скрипт повинен бути підключений до head."    },
    {
      "id": 5,
      "text": "Що робить властивість 'z-index' у CSS?",
      "hasOptions": false,
      "answer": "Властивість 'z-index' у CSS контролює стіковий порядок елементів по осі Z. Елемент з більшим значенням 'z-index' буде відображатися поверх елемента з меншим значенням 'z-index'."    },
    {
      "id": 6,
      "text": "Які є способи відцентрувати div?",
      "hasOptions": false,
      "answer": "Існує кілька способів відцентрувати div в CSS, ось деякі з них: \n1. Використання властивостей margin і auto: `margin: 0 auto;`.\n2. Використання Flexbox: `display: flex; justify-content: center;align-items: center;`.\n3.Використання Grid Layout: `display: grid;place-items: center;`.\n4. ` на батьківському елементі та `display: inline-block;` на самому div.`."    },
    {
      "id": 7,
      "text": "Яка властивість використовується для встановлення кольору фону?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Яка властивість дозволяє встановити зовнішні відступи елемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Яка властивість використовується для встановлення шрифту?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Яка властивість CSS дозволяє контролювати видимість елемента в DOM, але при цьому зберігає його місце?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Яка властивість CSS використовується для встановлення тіней елементів?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який селектор вибирає всі елементи .child, які є безпосередніми дочірніми елементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який селектор CSS вибирає всі елементи, які мають вказаний атрибут, що починається з певного рядка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Який селектор CSS вибирає всі елементи, які мають вказаний атрибут, що закінчується певним рядком?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Що таке чиста функція?",
      "hasOptions": false,
      "answer": "Це функція, яка повертає однаковий результат, коли викликається з тим самим набором аргументів, а також не має побічних ефектів (side effects)"    },
    {
      "id": 2,
      "text": "Що таке замикання?",
      "hasOptions": false,
      "answer": "Замикання - це здатність функції запам'ятовувати лексичне оточення, в якому вона була створена, тобто зберігати в собі посилання на це оточення і звертатися до нього.\n\n<a href='https://youtu.be /mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Докладніше відео про замикання</a>"    },
    {
      "id": 3,
      "text": "let VS const: чому краще використовувати const, коли це можливо?",
      "hasOptions": false,
      "answer": "Використання const дає дві переваги:\n1) Безпека: оголошення змінних через const захищає від несподіваної зміни значення змінної в коді, що може часто призводить до помилок і несподіваної поведінки програми.\n2) Читання: використання const дозволяє читачеві коду розуміти, що значення змінної не буде змінюватися протягом виконання програми, що робить код більш зрозумілим і зменшує можливість помилок. _blank'>Відео про VAR/LET/CONST</a>"    },
    {
      "id": 4,
      "text": "Що таке проміси (Promises) у JavaScript?",
      "hasOptions": false,
      "answer": "Проміси - це об'єкти, які представляють результат асинхронної операції. Вони можуть перебувати в одному з трьох станів: очікування (pending), виконане (fulfilled) або відхилено (rejected)."    },
    {
      "id": 5,
      "text": "Що таке деструктуризація JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризація дозволяє вилучати окремі властивості з об'єктів або елементи з масивів і присвоювати їх змінним у зручнішій формі. Наприклад, ось так ми можемо одним рядком вилучити ім'я та адресу користувача з об'єкта user:\n<code>const {name , address} = user;</code>"    },
    {
      "id": 6,
      "text": "Що таке стрілочні функції JavaScript?",
      "hasOptions": false,
      "answer": "Стрілкові функції - це синтаксично компактний спосіб запису функцій у JavaScript, який не має свого власного 'this'. Вони часто використовуються для створення анонімних функцій.\n\n<a href='https://youtu.be /nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Детальне відео про функції в JS</a>"    },
    {
      "id": 7,
      "text": "Що таке hoisting у JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — це механізм JavaScript, при якому змінні та оголошення функцій переміщаються на верх своєї області видимості перед виконанням коду."    },
    {
      "id": 8,
      "text": "Який метод використовується для додавання елемента в масив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Який об'єкт представляє поточне вікно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Який оператор використовується для порівняння на строгу рівність?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Який метод використовується для видалення останнього елемента з масиву?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Який метод JavaScript використовується для перетворення об'єкта в рядок JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Який об'єкт у JavaScript використовується для роботи з датою та часом?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Який метод масиву JavaScript використовується для фільтрації елементів за певним критерієм?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Что такое React JS?",
      "hasOptions": false,
      "answer": "React JS, или просто React, это открытая библиотека JavaScript для создания пользовательских интерфейсов, особенно для одностраничных приложений (SPA). Ключевые особенности React:\n1) Компонентный подход: React строится на концепции компонентов, что позволяет разработчикам создавать легко переиспользуемые куски кода;\n2) Виртуальный DOM: React использует виртуальный DOM для отслеживания изменений. Это абстракция реального DOM, что позволяет библиотеке обновлять только те части интерфейса, которые действительно изменились, вместо полного перерендеринга страницы. Это делает React относительно быстрым;\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений.\n\nПодробнее: <a href='https://youtu.be/R_39q-vdOaE?si=mEKDaYDjEdnojG-N' target='_blank'>Введение в React (видео)</a>"
    },
    {
      "id": 2,
      "text": "Для чего нужен атрибут key при рендере списков?",
      "hasOptions": false,
      "answer": "Ключи (keys) помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени. Лучший способ выбрать ключ — это использовать строку, которая будет явно отличать элемент списка от его соседей. Лучше всего вы будете использовать ID из ваших данных как ключи. Индексы массива тоже можно использовать для этого, но только если элементы массива не добавляются в начало, не переставляются и не удаляются."
    },
    {
      "id": 3,
      "text": "Как работает проп children?",
      "hasOptions": false,
      "answer": "Некоторые компоненты не знают своих потомков заранее. Это особенно характерно для таких компонентов, как Sidebar или Dialog, которые представляют из себя как бы «коробку», в которую можно что-то положить. Для таких компонентов можно использовать специальный проп children, который передаст дочерние элементы сразу на вывод.\n\nПодробнее: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>Документация React (eng)</a>"
    },
    {
      "id": 4,
      "text": "Что такое порталы в React?",
      "hasOptions": false,
      "answer": "Порталы позволяют рендерить дочерние элементы в DOM-узел, который находится вне DOM-иерархии родительского компонента. Типовой случай применения порталов — когда в родительском компоненте заданы стили overflow: hidden или z-index, но вам нужно, чтобы дочерний элемент визуально выходил за рамки своего контейнера. Чаще всего, это диалоговые окна, всплывающие карточки и всплывающие подсказки."
    },
    {
      "id": 5,
      "text": "Что такое Reconciliation (Cверка)?",
      "hasOptions": false,
      "answer": "Это процесс, посредством которого React обновляет DOM. Когда состояние компонента изменяется, React должен рассчитать необходимость обновления DOM. Это делается путем создания виртуального DOM и сравнения его с текущим DOM. В этом контексте виртуальный DOM будет содержать новое состояние компонента."
    },
    {
      "id": 6,
      "text": "Для чего используется хук useEffect в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Выполнения побочных эффектов",
          "isCorrect": true
        },
        { "id": 3, "text": "Мемоизации значений", "isCorrect": false },
        {
          "id": 4,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Что будет, если вторым аргументом в useEffect передать пустой массив []?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Ошибка", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect будет запущен 0 раз",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect будет запущен 1 раз", "isCorrect": true },
        { "id": 4, "text": "Нет верного ответа", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какой хук используется для создания состояния в компоненте?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какой элемент используется для группировки элементов без добавления дополнительных узлов в DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "У нас есть массив со строками (arr), каждую из которых мы хотим отразить на странице. Какой метод массива нужно применить в return компонента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Какой элемент используется для обработки ошибок в дереве компонентов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой (какие) аргумент(ы) принимает хук useMemo?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Функцию и массив зависимостей", "isCorrect": true },
        { "id": 2, "text": "Функцию и объект опций", "isCorrect": false },
        { "id": 3, "text": "Функцию", "isCorrect": false },
        { "id": 4, "text": "Массив зависимостей", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Для чего используется хук useCallback в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Выполнения побочных эффектов",
          "isCorrect": false
        },
        { "id": 4, "text": "Мемоизации функций", "isCorrect": true }
      ]
    }
  ]
}
